#!/home/siu/anaconda/bin/python

import os
import argparse
from datetime import datetime, timedelta

# argparse를 사용해 사용자로부터 로그 파일 입력받기
parser = argparse.ArgumentParser(
    description="This script reads a GROMACS md.log file and prints time information\n",
    formatter_class=argparse.RawTextHelpFormatter
)

parser.add_argument("log_file", type=str, help="md.log (GROMACS)")

args = parser.parse_args()
log_file = args.log_file

# 로그 파일에서 정보 추출 함수
with open(log_file, 'r') as file:
    for line in file:
        # Extract Path (formerly Working dir)
        if "Working dir:" in line:
            path = line.split("Working dir:")[1].strip()
            path = path.split("/")[-1]
        
        # Extract dt value
        if line.strip().startswith("dt"):
            dt = float(line.split('=')[1].strip())

        # Extract nsteps value
        if line.strip().startswith("nsteps"):
            nsteps = int(line.split('=')[1].strip())

        # Extract Started mdrun time and convert to Python datetime object
        if line.strip().startswith("Started mdrun on"):
            parts = line.split()
            date_string = " ".join(parts[-5:])
            started_time = datetime.strptime(date_string, "%a %b %d %H:%M:%S %Y")
            
        # Extract last step and time
        if "Step" in line and "Time" in line:
            # 다음 줄에 있는 step과 time 값 읽기
            step_line = next(file).strip()
            if step_line:
                step, time_val = step_line.split()
                the_step, the_time = int(step), float(time_val)

# Calculate ns from dt & nsteps
total_ns = (dt * nsteps) / 1000  # Convert from ps to ns
current_ns = the_time / 1000  # Convert from ps to ns
percentage = (current_ns / total_ns) * 100

print("")
print(f"Traj (ns): {current_ns:>6.1f} / {total_ns:<6.1f}")

# Time Calculation
last_mod_time = os.path.getmtime(log_file)  # Get last modification time of log file
last_mod_time = datetime.fromtimestamp(last_mod_time)  # Convert to datetime

# Estimate end time
elapsed_time = last_mod_time - started_time  # Time elapsed since the simulation started
estimated_total_time = elapsed_time / (percentage / 100)  # Total estimated time
estimated_end_time = started_time + estimated_total_time  # Estimated end time

# 시간을 시간 단위로 변환
elapsed_hours = elapsed_time.total_seconds() / 3600  # elapsed_time을 시간 단위로 변환
estimated_total_hours = estimated_total_time.total_seconds() / 3600  # estimated_total_time을 시간 단위로 변환

# Time 결과 출력
print(f"Time (hr): {elapsed_hours:>6.1f} / {estimated_total_hours:<6.1f}")
print(f"Prct  (%): {percentage:>6.1f} / 100")

# Estimated end time formatted with minutes and weekday
# started_time_formatted = started_time.strftime("%Y.%m.%d %H:%M %a")
# estimated_end_time_formatted = estimated_end_time.strftime("%Y.%m.%d %H:%M %a")

# Estimated end time formatted with minutes and weekday
started_time_formatted = started_time.strftime("%a %b %d %H:%M")
estimated_end_time_formatted = estimated_end_time.strftime("%a %b %d %H:%M")


# Estimated end time 출력
print("-----------------------------")
print(f"Initiated: {started_time_formatted:>18}")
print(f"Terminate: {estimated_end_time_formatted:>18}")
print("")

